open System
(* This is a multi-line 
    comment *)
// This is a single-line comment
printfn "Hello World!"

let sign num =
   if num > 0 then "positive"
   elif num < 0 then "negative"
   else "zero"
   


let main() =
   Console.WriteLine("sign 5: {0}", (sign 5))

main()


//sbyte, byte, int16, uint16, int32/int, uint32, int64, uint64, bigint
//float32, float, decimal, BigRational

(* single byte integer *)
let x = 268.97f
let y = 312.58f
let z = x + y

printfn "x: %f" x
printfn "y: %f" y
printfn "z: %f" z

(* unsigned 8-bit natural number *)

let p = 2uy
let q = 4uy
let r = p + q

printfn "p: %i" p
printfn "q: %i" q
printfn "r: %i" r

(* signed 16-bit integer *)

let a = 12s
let b = 24s
let c = a + b

printfn "a: %i" a
printfn "b: %i" b
printfn "c: %i" c

(* signed 32-bit integer *)

let d = 212l
let e = 504l
let f = d + e

printfn "d: %i" d
printfn "e: %i" e
printfn "f: %i" f

//char, string
(*strings*)
let choice = 'y'
let name = "Zara Ali"
let org = "Tutorials Point"

printfn "Choice: %c" choice
printfn "Name: %s" name
printfn "Organisation: %s" org


//bool
(*bool - true/false*)
let trueVal = true
let falseVal = false

printfn "True Value: %b" (trueVal)
printfn "False Value: %b" (falseVal)

//%i, %f,%b, %s

//Variable Declaration using let - immutable - once a value bound to a value, can't be changed
let val1 = 10
let val2 = 20
let result = val1 + val2

printfn "Result: %i" result
printfn "Results subtracted %i" (val2-val1)
printfn "Results multiplied %i" (val1*val2)
printfn "Results divided %i" (val2/val1)

let val3 = 10.5533f
let val4 = 30.3292f
printfn "Floats added %f" (val3+val4)
printfn "Floats added %.2f" (val3+val4)
printfn "Floats added %.1f" (val3+val4)

//Variable declaration with type declaration
let val5:int32 = 10
let val6:int32 = 20
let val7:int32 = val5 + val6

printfn "val5: %d" val5
printfn "val6: %d" val6
printfn "val7: %d" val7

let l:float = 15.99
let m:float = 20.78
let n:float = l + m

printfn "l: %g" l
printfn "m: %g" m
printfn "n: %g" n
------------------------------------------------------------------
//mutable variables

let mutable x = 10
let y = 20
let mutable z = x + y

printfn "Original Values:"
printfn "x: %i" x
printfn "y: %i" y
printfn "z: %i" z

printfn "Let us change the value of x"
printfn "Value of z will change too."

x <- 15
z <- x + y

printfn "New Values:"
printfn "x: %i" x
printfn "y: %i" y
printfn "z: %i" z

//arithmetic + - * / % ** - Expontiation B**A with give 20 to the power of 10
(* comparisons
    = equal or not or 
    <> 
    > >= < <=
 *)
 
 // && || not
            
            
(* if /then statement *)
let a : int32 = 10
if (a < 20) then
    printfn "a is less than 20\n"
    printfn "Value of a is: %d" a
    

let b : int32 = 100

(* check the boolean condition using if statement *)

if (b < 20) then
   printfn "b is less than 20\n"
else
   printfn "\nb is not less than 20\n"
   printfn "Value of a is: %d" b
   
   
let c : int32 = 100

if (c = 10) then
    printfn "Value of C is 10"
elif (c = 20) then
    printfn "Value of C is 20"
elif (c = 30) then
        printfn "Value of C is 30"
else
        printfn "None of the values are matching\n"
        printfn "Value of c is %d" c

-----------------------------------------------------------

let main() =
   for i = 20 downto 1 do
      printfn "i: %i" i
main()

let main() =
   for i = 1 to 20 do
      printfn "%i" 
main()

let mutable a = 10
while (a < 20) do
   printfn "value of a: %d" a
   a <- a + 1
   
// Looping over a list.
let list1 = [ 10; 25; 34; 45; 78 ]
for i in list1 do
   printfn "%d" i

// Looping over a sequence.
let seq1 = seq { for i in 1 .. 10 -> (i, i*i) }
for (a, asqr) in seq1 do
   printfn "%d squared is %d" a asqr